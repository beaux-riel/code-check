import { RuleMetadata } from './types';

export const securityRules: RuleMetadata[] = [
  {
    id: 'sql-injection',
    name: 'SQL Injection',
    description:
      'Avoid SQL injection vulnerabilities by using parameterized queries.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'database'],
    references: ['https://owasp.org/www-community/attacks/SQL_Injection'],
    examples: {
      bad: "executeQuery('SELECT * FROM users WHERE username = ' + userInput)",
      good: "executeQuery('SELECT * FROM users WHERE username = ?', [userInput])",
    },
  },
  {
    id: 'xss-prevention',
    name: 'XSS Prevention',
    description: 'Prevent cross-site scripting by properly escaping output.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'xss'],
    references: ['https://owasp.org/www-community/attacks/xss/'],
    examples: {
      bad: 'innerHTML = userInput',
      good: 'textContent = userInput',
    },
  },
  {
    id: 'csrf-protection',
    name: 'CSRF Protection',
    description: 'Protect against cross-site request forgery attacks.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'csrf'],
    references: ['https://owasp.org/www-community/attacks/csrf'],
  },
  {
    id: 'insecure-randomness',
    name: 'Insecure Randomness',
    description: 'Use cryptographically secure random number generators.',
    category: 'security',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'crypto'],
    examples: {
      bad: 'Math.random()',
      good: 'crypto.randomBytes(32)',
    },
  },
  {
    id: 'hardcoded-secrets',
    name: 'Hardcoded Secrets',
    description: 'Avoid hardcoded passwords, API keys, and other secrets.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'secrets'],
    references: [
      'https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password',
    ],
  },
  {
    id: 'insecure-deserialization',
    name: 'Insecure Deserialization',
    description: 'Avoid deserializing untrusted data.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'deserialization'],
    references: [
      'https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data',
    ],
  },
  {
    id: 'weak-cryptography',
    name: 'Weak Cryptography',
    description: 'Use strong cryptographic algorithms.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'cryptography'],
    examples: {
      bad: "crypto.createCipher('des', key)",
      good: "crypto.createCipher('aes-256-gcm', key)",
    },
  },
  {
    id: 'path-traversal',
    name: 'Path Traversal',
    description: 'Prevent directory traversal attacks.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'path-traversal'],
    references: ['https://owasp.org/www-community/attacks/Path_Traversal'],
  },
  {
    id: 'insecure-http',
    name: 'Insecure HTTP',
    description: 'Use HTTPS for all sensitive communications.',
    category: 'security',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'https'],
    examples: {
      bad: 'http://api.example.com/sensitive',
      good: 'https://api.example.com/sensitive',
    },
  },
  {
    id: 'insecure-headers',
    name: 'Missing Security Headers',
    description: 'Include security headers in HTTP responses.',
    category: 'security',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'headers'],
    references: ['https://owasp.org/www-project-secure-headers/'],
  },
  {
    id: 'eval-usage',
    name: 'Dangerous eval() Usage',
    description:
      'Avoid using eval() and similar functions with untrusted input.',
    category: 'security',
    severity: 'error',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'eval'],
    examples: {
      bad: 'eval(userInput)',
      good: 'JSON.parse(userInput)',
    },
  },
  {
    id: 'regex-dos',
    name: 'ReDoS - Regular Expression Denial of Service',
    description: 'Avoid catastrophic backtracking in regular expressions.',
    category: 'security',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['owasp', 'security', 'regex', 'dos'],
    references: [
      'https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS',
    ],
  },
];
