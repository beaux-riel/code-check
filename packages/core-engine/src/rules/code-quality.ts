import { RuleMetadata } from './types';

export const codeQualityRules: RuleMetadata[] = [
  {
    id: 'cyclomatic-complexity',
    name: 'Cyclomatic Complexity',
    description: 'Keep cyclomatic complexity below recommended thresholds.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['complexity', 'maintainability', 'metrics'],
    languages: ['javascript', 'typescript'],
    configuration: {
      maxComplexity: 10,
    },
  },
  {
    id: 'function-length',
    name: 'Function Length',
    description:
      'Keep functions concise and focused on a single responsibility.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['length', 'maintainability', 'readability'],
    languages: ['javascript', 'typescript'],
    configuration: {
      maxLines: 50,
    },
  },
  {
    id: 'parameter-count',
    name: 'Parameter Count',
    description:
      'Limit the number of function parameters for better readability.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['parameters', 'maintainability', 'design'],
    languages: ['javascript', 'typescript'],
    configuration: {
      maxParameters: 5,
    },
  },
  {
    id: 'nested-depth',
    name: 'Nesting Depth',
    description: 'Avoid deeply nested code structures.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['nesting', 'complexity', 'readability'],
    languages: ['javascript', 'typescript'],
    configuration: {
      maxDepth: 4,
    },
  },
  {
    id: 'duplicate-code',
    name: 'Duplicate Code Detection',
    description: 'Identify and eliminate duplicate code blocks.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['duplication', 'dry', 'maintainability'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'magic-numbers',
    name: 'Magic Numbers',
    description: 'Replace magic numbers with named constants.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: true,
    tags: ['constants', 'readability', 'maintainability'],
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `if (user.age > 18) { ... }`,
      good: `const LEGAL_AGE = 18; if (user.age > LEGAL_AGE) { ... }`,
    },
  },
  {
    id: 'dead-code',
    name: 'Dead Code Detection',
    description: 'Remove unreachable or unused code.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: true,
    tags: ['unused', 'cleanup', 'maintainability'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'consistent-naming',
    name: 'Consistent Naming Conventions',
    description:
      'Follow consistent naming conventions throughout the codebase.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['naming', 'conventions', 'readability'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'variable-naming',
    name: 'Meaningful Variable Names',
    description: 'Use descriptive and meaningful variable names.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['naming', 'readability', 'maintainability'],
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `const d = new Date();`,
      good: `const currentDate = new Date();`,
    },
  },
  {
    id: 'function-naming',
    name: 'Descriptive Function Names',
    description:
      'Use clear and descriptive function names that explain their purpose.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['naming', 'functions', 'readability'],
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `function calc(a, b) { return a + b; }`,
      good: `function calculateSum(firstNumber, secondNumber) { return firstNumber + secondNumber; }`,
    },
  },
  {
    id: 'class-naming',
    name: 'Clear Class Names',
    description: 'Use clear and descriptive class names following conventions.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['naming', 'classes', 'conventions'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'comment-quality',
    name: 'Comment Quality',
    description: 'Write meaningful comments that explain why, not what.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['comments', 'documentation', 'maintainability'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'cognitive-complexity',
    name: 'Cognitive Complexity',
    description: 'Keep cognitive complexity low for better code comprehension.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['complexity', 'comprehension', 'maintainability'],
    languages: ['javascript', 'typescript'],
    configuration: {
      maxCognitiveComplexity: 15,
    },
  },
  {
    id: 'line-length',
    name: 'Line Length',
    description: 'Keep line length within reasonable limits for readability.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: true,
    tags: ['formatting', 'readability', 'style'],
    languages: ['javascript', 'typescript'],
    configuration: {
      maxLength: 120,
    },
  },
  {
    id: 'whitespace-consistency',
    name: 'Consistent Whitespace',
    description: 'Maintain consistent whitespace and indentation.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: true,
    tags: ['formatting', 'consistency', 'style'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'consistent-quotes',
    name: 'Consistent Quote Usage',
    description: 'Use consistent quote style throughout the codebase.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: true,
    tags: ['formatting', 'consistency', 'style'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'semicolon-consistency',
    name: 'Semicolon Consistency',
    description: 'Maintain consistent semicolon usage.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: true,
    tags: ['formatting', 'consistency', 'style'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'import-organization',
    name: 'Import Organization',
    description: 'Organize imports in a consistent and logical manner.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: true,
    tags: ['imports', 'organization', 'style'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'type-annotations',
    name: 'Type Annotations',
    description: 'Provide explicit type annotations where beneficial.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['types', 'typescript', 'documentation'],
    languages: ['typescript'],
  },
  {
    id: 'error-handling',
    name: 'Proper Error Handling',
    description: 'Implement comprehensive error handling.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['errors', 'exception-handling', 'robustness'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'return-early',
    name: 'Early Return Pattern',
    description: 'Use early returns to reduce nesting and improve readability.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['flow-control', 'readability', 'patterns'],
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `function validate(user) {
  if (user) {
    if (user.name) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}`,
      good: `function validate(user) {
  if (!user) return false;
  if (!user.name) return false;
  return true;
}`,
    },
  },
  {
    id: 'avoid-deep-nesting',
    name: 'Avoid Deep Nesting',
    description: 'Refactor deeply nested code for better readability.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['nesting', 'readability', 'refactoring'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'consistent-return-types',
    name: 'Consistent Return Types',
    description: 'Ensure functions have consistent return types.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['types', 'consistency', 'functions'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'prefer-const',
    name: 'Prefer const over let',
    description: 'Use const for variables that are not reassigned.',
    category: 'code-quality',
    severity: 'info',
    enabled: true,
    fixable: true,
    tags: ['variables', 'immutability', 'best-practices'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'no-var',
    name: 'Avoid var keyword',
    description: 'Use let or const instead of var for better scoping.',
    category: 'code-quality',
    severity: 'warning',
    enabled: true,
    fixable: true,
    tags: ['variables', 'scoping', 'best-practices'],
    languages: ['javascript', 'typescript'],
  },
];
