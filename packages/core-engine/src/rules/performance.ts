import { RuleMetadata } from './types';

export const performanceRules: RuleMetadata[] = [
  // React Performance Rules
  {
    id: 'react-avoid-anonymous-functions',
    name: 'Avoid Anonymous Functions in JSX',
    description:
      'Avoid creating anonymous functions in JSX props to prevent unnecessary re-renders.',
    category: 'performance',
    severity: 'warning',
    enabled: true,
    fixable: true,
    tags: ['react', 'performance', 'jsx'],
    framework: 'react',
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `<Button onClick={() => handleClick()} />`,
      good: `<Button onClick={handleClick} />`,
    },
  },
  {
    id: 'react-memo-expensive-components',
    name: 'Memoize Expensive Components',
    description: 'Use React.memo for components that receive complex props.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['react', 'performance', 'memo'],
    framework: 'react',
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `const ExpensiveComponent = ({ data }) => { ... }`,
      good: `const ExpensiveComponent = React.memo(({ data }) => { ... })`,
    },
  },
  {
    id: 'react-use-callback-dependencies',
    name: 'Optimize useCallback Dependencies',
    description:
      'Ensure useCallback has correct dependencies to prevent unnecessary re-renders.',
    category: 'performance',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['react', 'performance', 'hooks'],
    framework: 'react',
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'react-use-memo-expensive-calculations',
    name: 'Memoize Expensive Calculations',
    description:
      'Use useMemo for expensive calculations that depend on props or state.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['react', 'performance', 'memo'],
    framework: 'react',
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `const expensiveValue = heavyCalculation(props.data);`,
      good: `const expensiveValue = useMemo(() => heavyCalculation(props.data), [props.data]);`,
    },
  },
  {
    id: 'react-avoid-object-inline-props',
    name: 'Avoid Inline Object Props',
    description:
      'Avoid creating objects inline in JSX props to prevent unnecessary re-renders.',
    category: 'performance',
    severity: 'warning',
    enabled: true,
    fixable: true,
    tags: ['react', 'performance', 'jsx'],
    framework: 'react',
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `<Component style={{ color: 'red' }} />`,
      good: `const styles = { color: 'red' }; <Component style={styles} />`,
    },
  },
  {
    id: 'react-key-prop-optimization',
    name: 'Optimize React Key Props',
    description:
      'Use stable, unique keys for list items to optimize rendering.',
    category: 'performance',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['react', 'performance', 'keys'],
    framework: 'react',
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `{items.map((item, index) => <Item key={index} />)}`,
      good: `{items.map(item => <Item key={item.id} />)}`,
    },
  },
  {
    id: 'react-lazy-loading',
    name: 'Use Lazy Loading for Routes',
    description:
      'Implement lazy loading for route components to reduce initial bundle size.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['react', 'performance', 'lazy'],
    framework: 'react',
    languages: ['javascript', 'typescript'],
    examples: {
      good: `const LazyComponent = lazy(() => import('./Component'));`,
    },
  },

  // Vue Performance Rules
  {
    id: 'vue-v-for-key-required',
    name: 'Vue v-for Requires Key',
    description:
      'Always provide a unique key when using v-for for optimal rendering.',
    category: 'performance',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['vue', 'performance', 'v-for'],
    framework: 'vue',
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `<li v-for="item in items">{{ item.name }}</li>`,
      good: `<li v-for="item in items" :key="item.id">{{ item.name }}</li>`,
    },
  },
  {
    id: 'vue-computed-vs-methods',
    name: 'Use Computed Properties Over Methods',
    description:
      'Use computed properties for reactive data transformations instead of methods.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['vue', 'performance', 'computed'],
    framework: 'vue',
    languages: ['javascript', 'typescript'],
    examples: {
      bad: `methods: { getFullName() { return this.firstName + ' ' + this.lastName; } }`,
      good: `computed: { fullName() { return this.firstName + ' ' + this.lastName; } }`,
    },
  },
  {
    id: 'vue-v-show-vs-v-if',
    name: 'Optimize v-show vs v-if Usage',
    description:
      'Use v-show for frequent toggling, v-if for conditional rendering.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['vue', 'performance', 'conditional'],
    framework: 'vue',
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'vue-functional-components',
    name: 'Use Functional Components for Stateless Components',
    description:
      'Consider functional components for stateless, presentational components.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['vue', 'performance', 'functional'],
    framework: 'vue',
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'vue-async-components',
    name: 'Use Async Components for Code Splitting',
    description:
      'Implement async components for better code splitting and loading performance.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['vue', 'performance', 'async'],
    framework: 'vue',
    languages: ['javascript', 'typescript'],
    examples: {
      good: `const AsyncComponent = () => import('./AsyncComponent.vue');`,
    },
  },

  // General Performance Rules
  {
    id: 'avoid-memory-leaks',
    name: 'Prevent Memory Leaks',
    description:
      'Clean up event listeners, timers, and subscriptions to prevent memory leaks.',
    category: 'performance',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['performance', 'memory', 'cleanup'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'optimize-bundle-size',
    name: 'Optimize Bundle Size',
    description: 'Use tree shaking and dynamic imports to reduce bundle size.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['performance', 'bundle', 'optimization'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'avoid-blocking-operations',
    name: 'Avoid Blocking Operations',
    description: 'Avoid synchronous operations that block the main thread.',
    category: 'performance',
    severity: 'warning',
    enabled: true,
    fixable: false,
    tags: ['performance', 'async', 'blocking'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'optimize-dom-operations',
    name: 'Optimize DOM Operations',
    description: 'Batch DOM operations and avoid frequent DOM queries.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['performance', 'dom', 'optimization'],
    languages: ['javascript', 'typescript'],
  },
  {
    id: 'efficient-data-structures',
    name: 'Use Efficient Data Structures',
    description: 'Choose appropriate data structures for better performance.',
    category: 'performance',
    severity: 'info',
    enabled: true,
    fixable: false,
    tags: ['performance', 'data-structures', 'algorithms'],
    languages: ['javascript', 'typescript'],
  },
];
