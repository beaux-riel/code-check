import { AnalysisPipelineResult } from '../pipeline/AnalysisPipeline';
import { AnalysisResultSchema } from '../schema/AnalysisResultSchema';
import { CodeIssue } from '@code-check/shared/types';
import fs from 'fs';
import path from 'path';

export interface ReportConfig {
  outputPath: string;
  includeDetails?: boolean;
  includeMetrics?: boolean;
  includeSummary?: boolean;
  templatePath?: string;
}

export interface ReportData {
  projectName: string;
  timestamp: string;
  summary: {
    totalFiles: number;
    totalIssues: number;
    healthScore: number;
    keyFindings: string[];
    recommendations: string[];
  };
  metrics: {
    linesOfCode: number;
    languageDistribution: Record<string, number>;
    qualityScore: number;
    securityRisk: string;
    performance: {
      analysisTime: number;
      fileProcessingRate: number;
    };
  };
  issues: {
    byCategory: Record<string, CodeIssue[]>;
    bySeverity: Record<string, CodeIssue[]>;
    topIssues: CodeIssue[];
  };
  files: {
    analyzed: number;
    skipped: number;
    largest: Array<{ path: string; size: number }>;
    byLanguage: Record<string, number>;
  };
}

export class ReportGenerator {
  private config: ReportConfig;

  constructor(config: ReportConfig) {
    this.config = {
      includeDetails: true,
      includeMetrics: true,
      includeSummary: true,
      ...config,
    };
  }

  /**
   * Generate all report formats
   */
  public async generateReports(
    result: AnalysisPipelineResult,
    projectName: string = 'Code Analysis'
  ): Promise<{
    markdownPath: string;
    htmlPath: string;
    jsonPath: string;
  }> {
    const reportData = this.extractReportData(result, projectName);

    const markdownPath = await this.generateMarkdownReport(reportData);
    const htmlPath = await this.generateHTMLReport(reportData);
    const jsonPath = await this.generateJSONReport(result);

    return { markdownPath, htmlPath, jsonPath };
  }

  /**
   * Generate AUDIT_RESULTS.md as specified in requirements
   */
  public async generateMarkdownReport(reportData: ReportData): Promise<string> {
    const outputPath = path.join(this.config.outputPath, 'AUDIT_RESULTS.md');

    const markdown = `# Code Analysis Report

**Generated:** ${reportData.timestamp}  
**Project:** ${reportData.projectName}  
**Total Files:** ${reportData.summary.totalFiles}  
**Lines of Code:** ${reportData.metrics.linesOfCode}

## Summary

**Health Score:** ${reportData.summary.healthScore}/100

### Key Findings
${reportData.summary.keyFindings.map((finding) => `- ${finding}`).join('\n')}

### Recommendations
${reportData.summary.recommendations.map((rec) => `- ${rec}`).join('\n')}

## Detailed Analysis

### File Statistics
- **Analyzed Files:** ${reportData.files.analyzed}
- **Skipped Files:** ${reportData.files.skipped}
- **Language Distribution:**
${Object.entries(reportData.files.byLanguage)
  .map(([lang, count]) => `  - ${lang}: ${count} files`)
  .join('\n')}

### Code Quality Metrics
- **Quality Score:** ${reportData.metrics.qualityScore}/100
- **Security Risk:** ${reportData.metrics.securityRisk}
- **Total Issues:** ${reportData.summary.totalIssues}

### Issues by Severity
${Object.entries(reportData.issues.bySeverity)
  .map(
    ([severity, issues]) =>
      `- **${severity.toUpperCase()}:** ${issues.length} issues`
  )
  .join('\n')}

${this.config.includeDetails ? this.generateIssueDetails(reportData.issues) : ''}

## Performance Metrics
- **Analysis Time:** ${reportData.metrics.performance.analysisTime}ms
- **File Processing Rate:** ${reportData.metrics.performance.fileProcessingRate.toFixed(2)} files/second

## Largest Files
${reportData.files.largest
  .slice(0, 10)
  .map(
    (file) =>
      `- ${path.basename(file.path)}: ${(file.size / 1024).toFixed(1)}KB`
  )
  .join('\n')}

---
*Report generated by Code Check Analysis Engine v1.0.0*
`;

    await this.ensureOutputDirectory();
    fs.writeFileSync(outputPath, markdown, 'utf8');

    return outputPath;
  }

  /**
   * Generate interactive HTML report
   */
  public async generateHTMLReport(reportData: ReportData): Promise<string> {
    const outputPath = path.join(this.config.outputPath, 'report.html');

    const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Analysis Report - ${reportData.projectName}</title>
    <style>
        ${this.getReportCSS()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Code Analysis Report</h1>
            <div class="metadata">
                <span><strong>Project:</strong> ${reportData.projectName}</span>
                <span><strong>Generated:</strong> ${reportData.timestamp}</span>
                <span><strong>Health Score:</strong> 
                    <span class="score score-${this.getScoreClass(reportData.summary.healthScore)}">
                        ${reportData.summary.healthScore}/100
                    </span>
                </span>
            </div>
        </header>

        <div class="dashboard">
            <div class="card">
                <h3>Files</h3>
                <div class="metric">${reportData.summary.totalFiles}</div>
                <div class="sub-metric">${reportData.files.analyzed} analyzed</div>
            </div>
            <div class="card">
                <h3>Issues</h3>
                <div class="metric">${reportData.summary.totalIssues}</div>
                <div class="sub-metric">${Object.keys(reportData.issues.bySeverity).length} categories</div>
            </div>
            <div class="card">
                <h3>Quality Score</h3>
                <div class="metric">${reportData.metrics.qualityScore}</div>
                <div class="sub-metric">out of 100</div>
            </div>
            <div class="card">
                <h3>Security Risk</h3>
                <div class="metric risk-${reportData.metrics.securityRisk.toLowerCase()}">${reportData.metrics.securityRisk}</div>
                <div class="sub-metric">overall assessment</div>
            </div>
        </div>

        <section class="section">
            <h2>Key Findings</h2>
            <ul class="findings">
                ${reportData.summary.keyFindings.map((finding) => `<li>${finding}</li>`).join('')}
            </ul>
        </section>

        <section class="section">
            <h2>Recommendations</h2>
            <ul class="recommendations">
                ${reportData.summary.recommendations.map((rec) => `<li>${rec}</li>`).join('')}
            </ul>
        </section>

        <section class="section">
            <h2>Issues by Severity</h2>
            <div class="issues-grid">
                ${Object.entries(reportData.issues.bySeverity)
                  .map(
                    ([severity, issues]) => `
                    <div class="issue-category">
                        <h4 class="severity-${severity}">${severity.toUpperCase()}</h4>
                        <div class="issue-count">${issues.length}</div>
                        <div class="issue-list">
                            ${issues
                              .slice(0, 5)
                              .map(
                                (issue) => `
                                <div class="issue-item">
                                    <span class="issue-rule">${issue.rule || 'Unknown'}</span>
                                    <span class="issue-file">${path.basename(issue.location.file)}</span>
                                </div>
                            `
                              )
                              .join('')}
                            ${issues.length > 5 ? `<div class="more-issues">... and ${issues.length - 5} more</div>` : ''}
                        </div>
                    </div>
                  `
                  )
                  .join('')}
            </div>
        </section>

        <section class="section">
            <h2>Language Distribution</h2>
            <div class="language-chart">
                ${Object.entries(reportData.files.byLanguage)
                  .sort(([, a], [, b]) => b - a)
                  .map(([lang, count]) => {
                    const percentage = (
                      (count / reportData.files.analyzed) *
                      100
                    ).toFixed(1);
                    return `
                        <div class="language-bar">
                            <span class="language-name">${lang}</span>
                            <div class="language-progress">
                                <div class="language-fill" style="width: ${percentage}%"></div>
                            </div>
                            <span class="language-count">${count} (${percentage}%)</span>
                        </div>
                    `;
                  })
                  .join('')}
            </div>
        </section>

        <section class="section">
            <h2>Performance Metrics</h2>
            <div class="performance-grid">
                <div class="performance-item">
                    <span class="performance-label">Analysis Time</span>
                    <span class="performance-value">${reportData.metrics.performance.analysisTime}ms</span>
                </div>
                <div class="performance-item">
                    <span class="performance-label">Processing Rate</span>
                    <span class="performance-value">${reportData.metrics.performance.fileProcessingRate.toFixed(2)} files/sec</span>
                </div>
            </div>
        </section>

        <footer>
            <p>Report generated by Code Check Analysis Engine v1.0.0</p>
        </footer>
    </div>

    <script>
        ${this.getReportJavaScript()}
    </script>
</body>
</html>`;

    await this.ensureOutputDirectory();
    fs.writeFileSync(outputPath, html, 'utf8');

    return outputPath;
  }

  /**
   * Generate raw JSON report
   */
  public async generateJSONReport(
    result: AnalysisPipelineResult
  ): Promise<string> {
    const outputPath = path.join(this.config.outputPath, 'report.json');

    await this.ensureOutputDirectory();
    fs.writeFileSync(outputPath, JSON.stringify(result, null, 2), 'utf8');

    return outputPath;
  }

  /**
   * Extract report data from analysis result
   */
  private extractReportData(
    result: AnalysisPipelineResult,
    projectName: string
  ): ReportData {
    const schema = result.schema;
    const issues = schema.issues || [];

    // Calculate health score
    const errorCount = issues.filter((i) => i.severity === 'error').length;
    const warningCount = issues.filter((i) => i.severity === 'warning').length;
    const healthScore = Math.max(0, 100 - (errorCount * 10 + warningCount * 2));

    // Group issues
    const issuesBySeverity = this.groupBy(issues, 'severity');
    const issuesByRule = this.groupBy(issues, 'rule');

    // Calculate metrics
    const linesOfCode =
      schema.files?.reduce((sum, file) => sum + file.linesOfCode, 0) || 0;
    const languageDistribution = this.calculateLanguageDistribution(
      schema.files || []
    );

    // Generate findings and recommendations
    const keyFindings = this.generateKeyFindings(issues, schema);
    const recommendations = this.generateRecommendations(issues, healthScore);

    return {
      projectName,
      timestamp: new Date().toISOString(),
      summary: {
        totalFiles: schema.summary.totalFiles,
        totalIssues: issues.length,
        healthScore,
        keyFindings,
        recommendations,
      },
      metrics: {
        linesOfCode,
        languageDistribution,
        qualityScore: schema.metrics?.quality?.codeQualityScore || 0,
        securityRisk: schema.metrics?.security?.riskLevel || 'unknown',
        performance: {
          analysisTime: result.duration,
          fileProcessingRate:
            schema.summary.totalFiles / (result.duration / 1000),
        },
      },
      issues: {
        byCategory: issuesByRule,
        bySeverity: issuesBySeverity,
        topIssues: this.getTopIssues(issues, 10),
      },
      files: {
        analyzed: schema.summary.analyzedFiles,
        skipped: schema.summary.skippedFiles,
        largest: this.getLargestFiles(schema.files || []),
        byLanguage: languageDistribution,
      },
    };
  }

  private generateIssueDetails(issues: ReportData['issues']): string {
    let details = '\n## Issue Details\n\n';

    Object.entries(issues.bySeverity).forEach(([severity, issueList]) => {
      if (issueList.length > 0) {
        details += `### ${severity.toUpperCase()} Issues (${issueList.length})\n\n`;

        issueList.slice(0, 20).forEach((issue) => {
          details += `#### ${issue.rule || 'Unknown Rule'}\n`;
          details += `- **File:** ${issue.location.file}\n`;
          details += `- **Line:** ${issue.location.line || 'N/A'}\n`;
          details += `- **Message:** ${issue.message}\n`;
          details += '\n';
        });

        if (issueList.length > 20) {
          details += `*... and ${issueList.length - 20} more ${severity} issues*\n\n`;
        }
      }
    });

    return details;
  }

  private groupBy<T>(array: T[], key: keyof T): Record<string, T[]> {
    return array.reduce(
      (groups, item) => {
        const group = String(item[key] || 'unknown');
        if (!groups[group]) {
          groups[group] = [];
        }
        groups[group].push(item);
        return groups;
      },
      {} as Record<string, T[]>
    );
  }

  private calculateLanguageDistribution(files: any[]): Record<string, number> {
    const distribution: Record<string, number> = {};
    files.forEach((file) => {
      const lang = file.language || 'Unknown';
      distribution[lang] = (distribution[lang] || 0) + 1;
    });
    return distribution;
  }

  private generateKeyFindings(
    issues: CodeIssue[],
    schema: AnalysisResultSchema
  ): string[] {
    const findings: string[] = [];

    const errorCount = issues.filter((i) => i.severity === 'error').length;
    const warningCount = issues.filter((i) => i.severity === 'warning').length;

    if (errorCount > 0) {
      findings.push(
        `Found ${errorCount} critical error${errorCount !== 1 ? 's' : ''} requiring immediate attention`
      );
    }

    if (warningCount > 10) {
      findings.push(
        `High number of warnings (${warningCount}) indicates code quality issues`
      );
    }

    const ruleFrequency = this.groupBy(issues, 'rule');
    const topRule = Object.entries(ruleFrequency).sort(
      ([, a], [, b]) => b.length - a.length
    )[0];

    if (topRule && topRule[1].length > 5) {
      findings.push(
        `Most common issue: ${topRule[0]} (${topRule[1].length} occurrences)`
      );
    }

    if (schema.metrics?.security?.riskLevel === 'high') {
      findings.push(
        'High security risk detected - review security vulnerabilities'
      );
    }

    if (findings.length === 0) {
      findings.push('No major issues detected - codebase appears healthy');
    }

    return findings;
  }

  private generateRecommendations(
    issues: CodeIssue[],
    healthScore: number
  ): string[] {
    const recommendations: string[] = [];

    if (healthScore < 50) {
      recommendations.push(
        'Focus on fixing critical errors to improve overall code health'
      );
    }

    if (healthScore < 80) {
      recommendations.push(
        'Address warning-level issues to improve code quality'
      );
    }

    const ruleFrequency = this.groupBy(issues, 'rule');
    const frequentRules = Object.entries(ruleFrequency)
      .filter(([, issues]) => issues.length > 3)
      .map(([rule]) => rule);

    if (frequentRules.length > 0) {
      recommendations.push(
        `Consider automated fixes for recurring issues: ${frequentRules.slice(0, 3).join(', ')}`
      );
    }

    recommendations.push('Set up pre-commit hooks to catch issues early');
    recommendations.push(
      'Consider enabling stricter linting rules for better code quality'
    );

    return recommendations;
  }

  private getTopIssues(issues: CodeIssue[], limit: number): CodeIssue[] {
    const severityWeight = { error: 3, warning: 2, info: 1 };
    return issues
      .sort(
        (a, b) =>
          (severityWeight[b.severity as keyof typeof severityWeight] || 0) -
          (severityWeight[a.severity as keyof typeof severityWeight] || 0)
      )
      .slice(0, limit);
  }

  private getLargestFiles(files: any[]): Array<{ path: string; size: number }> {
    return files
      .sort((a, b) => b.size - a.size)
      .slice(0, 10)
      .map((file) => ({ path: file.path, size: file.size }));
  }

  private getScoreClass(score: number): string {
    if (score >= 80) return 'good';
    if (score >= 60) return 'fair';
    return 'poor';
  }

  private async ensureOutputDirectory(): Promise<void> {
    if (!fs.existsSync(this.config.outputPath)) {
      fs.mkdirSync(this.config.outputPath, { recursive: true });
    }
  }

  private getReportCSS(): string {
    return `
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; background: #f5f5f5; }
      .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
      header { background: white; padding: 30px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
      h1 { color: #2c3e50; margin-bottom: 15px; }
      .metadata { display: flex; gap: 30px; flex-wrap: wrap; }
      .metadata span { color: #7f8c8d; }
      .score { padding: 4px 8px; border-radius: 4px; font-weight: bold; }
      .score-good { background: #d4edda; color: #155724; }
      .score-fair { background: #fff3cd; color: #856404; }
      .score-poor { background: #f8d7da; color: #721c24; }
      .dashboard { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
      .card { background: white; padding: 25px; border-radius: 10px; text-align: center; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
      .card h3 { color: #7f8c8d; font-size: 14px; margin-bottom: 10px; text-transform: uppercase; }
      .metric { font-size: 2.5em; font-weight: bold; color: #2c3e50; }
      .sub-metric { color: #95a5a6; font-size: 14px; }
      .risk-low { color: #27ae60; }
      .risk-medium { color: #f39c12; }
      .risk-high { color: #e74c3c; }
      .section { background: white; margin-bottom: 20px; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
      .section h2 { color: #2c3e50; margin-bottom: 20px; border-bottom: 2px solid #ecf0f1; padding-bottom: 10px; }
      .findings, .recommendations { list-style: none; }
      .findings li, .recommendations li { padding: 10px 0; border-bottom: 1px solid #ecf0f1; }
      .findings li:before { content: "🔍"; margin-right: 10px; }
      .recommendations li:before { content: "💡"; margin-right: 10px; }
      .issues-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
      .issue-category { border: 1px solid #ecf0f1; border-radius: 8px; padding: 15px; }
      .severity-error { color: #e74c3c; }
      .severity-warning { color: #f39c12; }
      .severity-info { color: #3498db; }
      .issue-count { font-size: 2em; font-weight: bold; margin: 10px 0; }
      .issue-item { display: flex; justify-content: space-between; padding: 5px 0; font-size: 0.9em; }
      .issue-rule { color: #e74c3c; font-weight: 500; }
      .issue-file { color: #7f8c8d; }
      .more-issues { color: #95a5a6; font-style: italic; padding: 5px 0; }
      .language-chart { space-y: 10px; }
      .language-bar { display: flex; align-items: center; gap: 15px; padding: 8px 0; }
      .language-name { min-width: 100px; font-weight: 500; }
      .language-progress { flex: 1; height: 8px; background: #ecf0f1; border-radius: 4px; overflow: hidden; }
      .language-fill { height: 100%; background: linear-gradient(90deg, #3498db, #2980b9); border-radius: 4px; }
      .language-count { min-width: 80px; text-align: right; color: #7f8c8d; }
      .performance-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
      .performance-item { display: flex; justify-content: space-between; padding: 15px; background: #f8f9fa; border-radius: 8px; }
      .performance-label { color: #7f8c8d; }
      .performance-value { font-weight: bold; color: #2c3e50; }
      footer { text-align: center; padding: 30px; color: #95a5a6; }
    `;
  }

  private getReportJavaScript(): string {
    return `
      // Add interactive features
      document.addEventListener('DOMContentLoaded', function() {
        // Add click handlers for expandable sections
        const issueCategories = document.querySelectorAll('.issue-category');
        issueCategories.forEach(category => {
          category.style.cursor = 'pointer';
          category.addEventListener('click', function() {
            const issueList = this.querySelector('.issue-list');
            if (issueList.style.display === 'none') {
              issueList.style.display = 'block';
            } else {
              issueList.style.display = 'none';
            }
          });
        });

        // Add tooltips for metrics
        const metrics = document.querySelectorAll('.metric');
        metrics.forEach(metric => {
          metric.title = 'Click for more details';
        });
      });
    `;
  }
}
